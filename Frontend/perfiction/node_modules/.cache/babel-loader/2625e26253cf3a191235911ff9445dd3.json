{"ast":null,"code":"import _objectWithoutProperties from \"/Users/benjamin/School/Perfiction/Frontend/perfiction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/benjamin/School/Perfiction/Frontend/perfiction/src/SignUp.js\";\nimport React, { Component } from 'react';\nimport { Spring } from 'react-spring/renderprops';\nimport Create from './components/Create'; // Function to validate if input is acceptable\n\nconst formValid = (_ref) => {\n  let formErrors = _ref.formErrors,\n      rest = _objectWithoutProperties(_ref, [\"formErrors\"]);\n\n  let valid = true; // Validate form errors being empty\n\n  Object.values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  }); // Validate form if it isn't filled out\n\n  Object.values(rest).forEach(val => {\n    val === null && (valid = false);\n  });\n  return valid;\n}; // An email validation code\n\n\nconst emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\nexport class SignUp extends Component {\n  constructor(props) {\n    super(props); // The state of the form to begin with\n\n    this.handleSubmit = event => {\n      event.preventDefault(); // If the format is valid print this to Console\n\n      if (formValid(this.state)) {\n        console.log(\"\\n            --SUBMITTING--\\n            First Name: \".concat(this.state.firstName, \"\\n            Last Name: \").concat(this.state.lastName, \"\\n            Email: \").concat(this.state.email, \"\\n            Password: \").concat(this.state.password, \"\\n            \"));\n      } else {\n        console.log('INVALID FORM - ERROR MESSAGE');\n      }\n    };\n\n    this.handleChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      let formErrors = this.state.formErrors; // Swith statement for form input rules\n\n      switch (name) {\n        case 'firstName':\n          formErrors.firstName = value.length < 2 ? 'minimum 2 characters required' : '';\n          break;\n\n        case 'lastName':\n          formErrors.lastName = value.length < 2 ? 'minimum 2 characters required' : '';\n          break;\n\n        case 'email':\n          formErrors.email = emailRegex.test(value) ? '' : 'Invald email address';\n          break;\n\n        case 'password':\n          formErrors.password = value.length < 6 ? 'minimum 6 characters required' : '';\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        formErrors,\n        [name]: value\n      }, () => console.log(this.state));\n    };\n\n    this.state = {\n      firstName: null,\n      lastName: null,\n      email: null,\n      password: null,\n      formErrors: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: ''\n      }\n    };\n  } // The submit handler\n\n\n  render() {\n    // Initializing formErrors property for it to be able to be used\n    const formErrors = this.state.formErrors;\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Create Account\"), React.createElement(Create, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/benjamin/School/Perfiction/Frontend/perfiction/src/SignUp.js"],"names":["React","Component","Spring","Create","formValid","formErrors","rest","valid","Object","values","forEach","val","length","emailRegex","RegExp","SignUp","constructor","props","handleSubmit","event","preventDefault","state","console","log","firstName","lastName","email","password","handleChange","target","name","value","test","setState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Spring } from 'react-spring/renderprops';\nimport Create from './components/Create';\n\n// Function to validate if input is acceptable\nconst formValid = ({ formErrors, ...rest }) => {\n  let valid = true;\n\n  // Validate form errors being empty\n  Object.values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  });\n\n  // Validate form if it isn't filled out\n  Object.values(rest).forEach(val => {\n    val === null && (valid = false);\n  });\n\n  return valid;\n};\n\n// An email validation code\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\n\nexport class SignUp extends Component {\n  constructor(props) {\n    super(props);\n\n    // The state of the form to begin with\n    this.state = {\n      firstName: null,\n      lastName: null,\n      email: null,\n      password: null,\n      formErrors: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: ''\n      }\n    };\n  }\n\n  // The submit handler\n  handleSubmit = event => {\n    event.preventDefault();\n\n    // If the format is valid print this to Console\n    if (formValid(this.state)) {\n      console.log(`\n            --SUBMITTING--\n            First Name: ${this.state.firstName}\n            Last Name: ${this.state.lastName}\n            Email: ${this.state.email}\n            Password: ${this.state.password}\n            `);\n    } else {\n      console.log('INVALID FORM - ERROR MESSAGE');\n    }\n  };\n\n  // The Change handler\n  handleChange = event => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    let formErrors = this.state.formErrors;\n\n    // Swith statement for form input rules\n    switch (name) {\n      case 'firstName':\n        formErrors.firstName =\n          value.length < 2 ? 'minimum 2 characters required' : '';\n        break;\n\n      case 'lastName':\n        formErrors.lastName =\n          value.length < 2 ? 'minimum 2 characters required' : '';\n        break;\n\n      case 'email':\n        formErrors.email = emailRegex.test(value) ? '' : 'Invald email address';\n        break;\n\n      case 'password':\n        formErrors.password =\n          value.length < 6 ? 'minimum 6 characters required' : '';\n        break;\n      default:\n        break;\n    }\n\n    this.setState({ formErrors, [name]: value }, () => console.log(this.state));\n  };\n\n  render() {\n    // Initializing formErrors property for it to be able to be used\n    const { formErrors } = this.state;\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"form-wrapper\">\n          <h1>Create Account</h1>\n          <Create />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}